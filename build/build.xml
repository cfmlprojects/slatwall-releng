<project name="distro.build" default="build" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">

	<loadproperties srcfile="build.properties"/>
	<property name="mxunit.tests.dir" location="${src.dir}/Slatwall/meta/tests" />
	<property name="mxunit.runner" value="/Slatwall/meta/tests/HttpAntRunner.cfc" />
	<property name="mxunit.componentpath" value="Slatwall.meta.tests" />
	<property name="mxunit.tests.results.dir" location="${dist.dir}/testresults" />
	<property name="mxunit.recurse" value="true" />
	<property name="mxunit.packageName" value="${mxunit.componentpath}" />
	<import file="${cfdistro.build.file}"/>

	<target name="build" depends="cfdistro.build, slatwall.initdb">
		<dependency groupId="org.mxunit" artifactId="core" version="${mxunit.version}" mapping="/mxunit" />
		<dependency groupId="cfml.cfselenium" artifactId="cfselenium" version="2.28.0" mapping="/CFSelenium" />
		<mapping physical="@src.dir@/../tests" virtual="/tests" />
	</target>

	<target name="build.test" depends="build">
		<echo file="${src.dir}/Slatwall/meta/tests/HttpAntRunner.cfc"><![CDATA[<cfcomponent extends="mxunit.runner.HttpAntRunner"></cfcomponent>]]></echo>
		<server-run>
<!--
 			<get src="http://${server.host}:${server.port.http}/plugins/slatwall/index.cfm" dest="${temp.dir}/firedUpMuraNowDelMe" />
			<delete file="${temp.dir}/firedUpMuraNowDelMe" />
 -->
 			<get src="http://${server.host}:${server.port.http}/?s=1" dest="${temp.dir}/firedUpMuraNowDelMe.html" />
 			<get src="http://${server.host}:${server.port.http}/index.cfm?slatAction=main.login" dest="${temp.dir}/firedUpMuraNowDelMe.html" />
			<antcontrib:post to="http://${server.host}:${server.port.http}/?slatAction=main.authorizelogin" verbose="true" failonerror="true" logfile="/tmp/fart2.html" >
				<prop name="emailAddress" value="valliantster@gmail.com"/>
				<prop name="password" value="testtest"/>
	    	</antcontrib:post>
			<mxunit-call 
				path="${mxunit.tests.dir}/unit" componentPath="${mxunit.componentpath}.unit"
				packageName="${mxunit.componentpath}.unit" recurse="${mxunit.recurse}"
				outputdir="${mxunit.tests.results.dir}/unit" failonerror="${mxunit.failonerror}"
			/>
			<mxunit-call 
				path="${mxunit.tests.dir}/coverage" componentPath="${mxunit.componentpath}.coverage"
				packageName="${mxunit.componentpath}.coverage" recurse="${mxunit.recurse}"
				outputdir="${mxunit.tests.results.dir}/coverage" failonerror="${mxunit.failonerror}"
			/>
		</server-run>
	</target>

	<target name="slatwall.getversion">
		<loadfile srcFile="${src.dir}/Slatwall/version.txt" property="slatwall.version"/>
	</target>

	<target name="build.mvn.deploy" depends="project.update, slatwall.getversion, build.test">
	    <property name="mvn.repo.dest" value="local" />
	    <property name="mvn.repo.dest" value="remote" />
	    <property name="mvn.repo.id" value="mvn.repo.${mvn.repo.dest}" />
	    <property name="maven.repo.local" location="${cfdistro.basedir}/artifacts" />
		<mvn-repo id="mvn.repo.local" url="file://${maven.repo.local}/" />
	   	<property name="mvn.type" value="release" />
	   	<delete file="${dist.dir}/slatwall.zip" />
		<defaultexcludes remove="**/.gitignore"/>
		<zip destfile="${dist.dir}/slatwall.zip" update="false">
	        <fileset dir="${src.dir}/Slatwall" excludes="config/settings.ini.cfm, config/lastFullUpdate.txt.cfm" />
		</zip>
		<pom-and-deploy pomid="slatwall.pom" packaging="zip" artifact="${dist.dir}/slatwall.zip"
		 groupId="com.getslatwall" artifactId="slatwall" version="${slatwall.version}" name="slatwall"/>
	</target>

	<target name="slatwall.initdb" depends="exists.datasources.xml">
		<sql
			driver="${dsn.slatwall.class}"
			url="${dsn.slatwall.url}"
		    userid="${dsn.slatwall.username}"
		    password="${dsn.slatwall.password}">
			DROP DATABASE IF EXISTS slatwall;
			CREATE DATABASE slatwall;
			<classpath>
				<path refid="data.lib.path"/>
			</classpath>
		</sql>
	</target>
	
</project>
